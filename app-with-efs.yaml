---
# PersistentVolumeClaim for EFS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
  annotations:
    volume.beta.kubernetes.io/storage-class: efs-sc
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi
    limits:
      storage: 10Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mysampleapp-pdb
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: mysampleapp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysampleapp
  labels:
    app: mysampleapp
spec:
  replicas: 5
  selector:
    matchLabels:
      app: mysampleapp
  template:
    metadata:
      labels:
        app: mysampleapp
        env: mysamplelable
    spec:
      containers:
      - name: mycontainer
        image: priya18082004/myimage:latest
        ports:
        - containerPort: 5000
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 3000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 1000m
            memory: 512Mi
          limits:
            cpu: 1500m
            memory: 1Gi
        volumeMounts:
        - name: efs-storage
          mountPath: /data  # Mount path inside container
      volumes:
      - name: efs-storage
        persistentVolumeClaim:
          claimName: efs-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysampleapp-service
  labels:
    app: mysampleapp
spec:
  type: NodePort
  selector:
    app: mysampleapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mysampleapp-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mysampleapp-service
            port:
              number: 80
