apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${deployment_name}
  labels:
%{ for key, value in deployment_labels ~}
    ${key}: ${value}
%{ endfor }

spec:
  replicas: ${deployment_replicas}
  selector:
    matchLabels:
%{ for key, value in deployment_selector_labels ~}
      ${key}: ${value}
%{ endfor }

  template:
    metadata:
      labels:
%{ for key, value in deployment_app_labels ~}
        ${key}: ${value}
%{ endfor }

    spec:
      containers:
      - name: ${deployment_container_name}
        image: ${deployment_container_image}
        ports:
        - containerPort: ${deployment_container_port}

        securityContext:
          runAsNonRoot: true
          runAsUser: ${run_as_user}
          runAsGroup: ${run_as_group}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL

        livenessProbe:
          httpGet:
            path: ${liveness_path}
            port: ${liveness_probe_port}
          initialDelaySeconds: ${liveness_initial_delay}
          periodSeconds: ${liveness_period}

        readinessProbe:
          httpGet:
            path: ${readiness_path}
            port: ${readiness_probe_port}
          initialDelaySeconds: ${readiness_initial_delay}
          periodSeconds: ${readiness_period}

        resources:
          requests:
            cpu: ${cpu_request}
            memory: ${memory_request}
          limits:
            cpu: ${cpu_limit}
            memory: ${memory_limit}

        volumeMounts:
        - name: ${volume_name}
          mountPath: ${mount_path}

      volumes:
      - name: ${volume_name}
        persistentVolumeClaim:
          claimName: ${pvc_name}
